/**
@author	Stuart Garrigan
@version 1.0.1
@since 11/12/2014
 */

package au.gov.aims.utilities;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

import au.com.bytecode.opencsv.CSVReader;
import au.com.bytecode.opencsv.CSVWriter;
import au.com.bytecode.opencsv.bean.CsvToBean;
import au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategy;
import au.gov.aims.interfaces.GeoServerFileCsvParserInterface;
import au.gov.aims.model.GeoServerFile;

/**
 * Handles the writing and parsing of shape files to and from .csv.
 *
 */

public class GeoServerFileCsvParser implements GeoServerFileCsvParserInterface {
	// Attributes
	public Logger logger;

	// Constructor
	public GeoServerFileCsvParser() {
		logger = Logger.getLogger(GeoServerFileCsvParser.class);
	}

	/**
	 * Access a .csv and parse each row into a java bean. Using
	 * HeadingColumnNameTranslateMappingStrategy.
	 *
	 * @param fileNameToParse - The absolute path of the desired shapeFile .csv to parse.
	 * 
	 * @return Returns a list of GeoServerFile objects parsed to a java bean.
	 */
	@Override
	public List<GeoServerFile> parseGeoServerFileToJavaBean(String fileNameToParse) throws IOException {
		HeaderColumnNameTranslateMappingStrategy<GeoServerFile> beanStrategy = new HeaderColumnNameTranslateMappingStrategy<GeoServerFile>();
		beanStrategy.setType(GeoServerFile.class);

		Map<String, String> columnMapping = new HashMap<String, String>();
		columnMapping.put("storePath", "storePath");
		columnMapping.put("storeName", "storeName");
		columnMapping.put("layerName", "layerName");
		columnMapping.put("workspace", "workspace");
		columnMapping.put("storeType", "storeType");
		columnMapping.put("title", "title");
		columnMapping.put("abstract", "layerAbstract");
		columnMapping.put("metadataXmlHref", "metadataXmlHref");
		columnMapping.put("keywords", "keywords");
		columnMapping.put("wmsPath", "wmsPath");
		columnMapping.put("styles", "styles");
		columnMapping.put("uploadData", "uploadData");
		columnMapping.put("uploadMetadata", "uploadMetadata");

		beanStrategy.setColumnMapping(columnMapping);

		CsvToBean<GeoServerFile> csvToBean = new CsvToBean<GeoServerFile>();
		CSVReader reader = new CSVReader(new FileReader(fileNameToParse), ',');

		List<GeoServerFile> shapeFiles = csvToBean.parse(beanStrategy, reader);
		
		//Looks to remove example columns from the bean list no matter where they have ended up.
		for (int i = 0; i < shapeFiles.size(); i++) {
			if (shapeFiles.get(i).getStorePath().contains("EXAMPLE_ONLY")) {
				shapeFiles.remove(i);
			}
			
			if (shapeFiles.get(i).getStorePath().contains("DESCRIPTION_ONLY")) {
				shapeFiles.remove(i);
			}
		}
		reader.close();
		return shapeFiles;
	}

	/**
	 * Write a list of files to a specified .csv. Takes a list of files which
	 * are converted to a List of String Arrays before being written the .csv.
	 *
	 * @param files - The list of files to be written to a .csv
	 * @param targetFileName - The absolute path of the desired output location of the written .csv.
	 */
	@Override
	public void writeFilesToCsv(List<File> files, String targetFileName) {
		try {
			FileWriter fileWriter = new FileWriter(targetFileName);
			CSVWriter csvWriter = new CSVWriter(fileWriter, ',');
			
			List<String[]> data = fileListToStringArray(files, PathsHandler.getBasePath(targetFileName));
			csvWriter.writeAll(data);

			csvWriter.close();
			fileWriter.close();
		} catch (Exception e) {
			logger.debug("ERROR - An error has occured when writing to a .csv");
		}
	}
	
	/**
	 * Write a list of GeoServerFiles to a specified .csv. Takes a list of files which
	 * are converted to a List of String Arrays before being written the .csv.
	 *
	 * @param files - The list of GeoServerFiles to be written to a .csv
	 * @param targetFileName - The absolute path of the desired output location of the written .csv.
	 */
	public void writeFailedFilesToCsv(List<GeoServerFile> files, String targetFileName) {
		try {
			FileWriter fileWriter = new FileWriter(targetFileName);
			CSVWriter csvWriter = new CSVWriter(fileWriter, ',');
			
			List<String[]> data = geoserverFilesToStringArray(files, PathsHandler.getBasePath(targetFileName));
			csvWriter.writeAll(data);

			csvWriter.close();
			fileWriter.close();
		} catch (Exception e) {
			e.printStackTrace();
			logger.debug("ERROR - An error has occured when writing to a .csv");
		}
	}
	
	/**
	 * Convert a list of File objects to a List of String Arrays.
	 *
	 * @param fileList - The list of files to be converted.
	 * @param homeDirectory - Base directory of the .csv.
	 * 
	 * @return a List of String Arrays.
	 */
	public List<String[]> fileListToStringArray(List<File> fileList, String homeDirectory) {
		List<String[]> records = new ArrayList<String[]>();
		// add header record to the csv.
		records.add(new String[] { "storePath", "storeName",
				"layerName", "workspace", "storeType", "title", "abstract",
				"metadataXmlHref", "keywords", "wmsPath", "styles",
				"uploadData", "uploadMetadata" });
		
		// Add 2 rows for example and description information. When parsed the program 
		// will look for the flags "EXAMPLE_ONLY" and "DESCRIPTION_ONLY"
		// these rows will be ignored when the csv is parsed to a bean.
		records.add(new String[]{"EXAMPLE_ONLY", "This will be an example"});
		records.add(new String[]{"DESCRIPTION_ONLY", "This is another example"});

		// Add new record per object in list with defaults entries to the csv.
		Iterator<File> it = fileList.iterator();
		while (it.hasNext()) {
			try {
				File file = it.next();
				
				String relativePath = PathsHandler.absoluteToRelativePath(file.getAbsolutePath(), homeDirectory);
				String shortName = file.getName().substring(0, file.getName().length() - 4);
				
				if(file.toString().endsWith(".shp")){
				records.add(new String[] {"/" + PathsHandler.backslashToForwardslash(relativePath),
						shortName, shortName, "", "Shapefile", shortName + " Title", "", "something.xml",
						"e.g. Maritime Boundary", relativePath, "", "TRUE", "TRUE" });
				}
				
				else if(file.toString().endsWith(".tif")) {
					records.add(new String[] {"/" + PathsHandler.backslashToForwardslash(relativePath),
							shortName, shortName, "", "GeoTiff", shortName + " Title", "", "something.xml",
							"e.g. Maritime Boundary", relativePath, "", "TRUE", "TRUE" });
				}
			} catch (IndexOutOfBoundsException e) {
				logger.debug("ERROR - An error occured when writing object to .csv, likely caused by too many defaults or not enough to match number of columns");
			} catch (Exception e) {
				logger.debug("ERROR - Some other error has occured whilst trying to write an object to a .csv");
			}
		}
		return records;
	}
	
	/**
	 * Convert a list of GeoServerFile objects to a List of String Arrays.
	 *
	 * @param fileList - The list of GeoServer files to be converted.
	 * @param homeDirectory - Base directory of the .csv.
	 * 
	 * @return a List of String Arrays.
	 */
	public List<String[]> geoserverFilesToStringArray(List<GeoServerFile> fileList, String homeDirectory) {
		List<String[]> records = new ArrayList<String[]>();
		// add header record to the csv.
		records.add(new String[] { "storePath", "storeName",
				"layerName", "workspace", "storeType", "title", "abstract",
				"metadataXmlHref", "keywords", "wmsPath", "styles",
				"uploadData", "uploadMetadata" });
		
		// Add 2 rows for example and description information. When parsed the program 
		// will look for the flags "EXAMPLE_ONLY" and "DESCRIPTION_ONLY"
		// these rows will be ignored when the csv is parsed to a bean.
		records.add(new String[]{"EXAMPLE_ONLY", "This will be an example"});
		records.add(new String[]{"DESCRIPTION_ONLY", "This is another example"});

		// Add new record per object in list with defaults entries to the csv.
		Iterator<GeoServerFile> it = fileList.iterator();
		while (it.hasNext()) {
			try {
				GeoServerFile file = it.next();
				records.add(new String[] {"/" + PathsHandler.absoluteToRelativePath(file.getStorePath(), homeDirectory),
						file.getStoreName(), file.getLayerName(), file.getWorkspace(), 
						file.getStoreType(), file.getTitle(), file.getLayerAbstract(),
						file.getMetadataXmlHref(), file.getKeywords(), file.getWmsPath(),
						file.getStyles(), file.getUploadData(), file.getUploadMetadata()});
			} catch (IndexOutOfBoundsException e) {
				logger.debug(e.getStackTrace() + "An error occured when writing object to .csv, likely caused by too many defaults or not enough to match number of columns");
			} catch (Exception e) {
				logger.debug(e.getStackTrace() + "Some other error has occured whilst trying to write an object to a .csv");
			}
		}
		return records;
	}
}