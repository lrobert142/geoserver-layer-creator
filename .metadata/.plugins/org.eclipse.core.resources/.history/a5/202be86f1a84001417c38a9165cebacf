/**
@author Justin Osbaldiston
@version 1.0.0
@since 4/12/14
**/

package au.gov.aims.model;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.io.FilenameUtils;
import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.Logger;

/**
 * Runs program to create CSV, then upload files with settings from the CSV to the GeoSever
 */
public class UploadManger {
	private GeoServerFileHandlerWrapper fileHandler;
	private GeoServerManager geoServerManager;
	private Logger logger;
	
	/**
	 * Constructor - sets up the directory for use and makes a connection to the GeoServer
	 */
	public UploadManger(String geoServerUrl, String geoServerUserName, String geoServerPassword) {
		BasicConfigurator.configure();
		logger = Logger.getLogger(UploadManger.class);
		fileHandler = new GeoServerFileHandlerWrapper();
		geoServerManager = new GeoServerManager(geoServerUrl, geoServerUserName, geoServerPassword);
	}
	
	/**
	 * Checks to see if a connection exists between the system and the GeoServer
	 * @return boolean - returns true if there is a connection, false if there is not
	 */
	public boolean checkForConnection() {
		return geoServerManager.checkConnectionExists();
	}
	
	/**
	 * Creates .zip files in a temporary directory
	 * @param filesDirectory - the directory where the GeoServer files are. This is also where the CSV file will be created
	 */
	public void setUpFiles(String filesDirectory) {
		fileHandler.setUpFilesForUpload(filesDirectory);
		logger.debug("GeoServer files ready for upload");
	}
	
	public void writeCSV(String filesDirectory) {
		List<File> filesFound = fileHandler.findFilesForUpload(filesDirectory);
		fileHandler.initialWriteGeoServerFilesToCsv(filesFound, filesDirectory + "\\uploadLayers.csv");
	}
	
	/**
	 * Uploads each ShapeFile to the GeoServer, with the settings defined in the CSV
	 * @param csvFileName - the csv file path
	 * @return boolean - true if the upload was successful for all files, false if one or more files failed to upload. If one file fails to upload then the uploader will stop, it will not upload the rest of the files
	 */
	public boolean uploadGeoServerFilesToGeoServer(String csvFileName) {
		List<GeoServerFile> geoServerFiles = fileHandler.parseGeoServerFileUploadLayersCsvToBean(csvFileName);
		List<GeoServerFile> failedUploads = new ArrayList<GeoServerFile>();
		for(GeoServerFile geoServerFile : geoServerFiles) {
			if(Boolean.parseBoolean(geoServerFile.getUploadData())) {
				switch (geoServerFile.getStoreType()) {
				case "Shapefile":
					File zipFile = new File(geoServerFile.getStorePath());
//					if(!geoServerManager.uploadShapeFile(geoServerFile.getWorkspace(), geoServerFile.getStoreName(), zipFile, geoServerFile.getTitle(), geoServerFile.getLayerAbstract(), geoServerFile.getMetadataXmlHref(), geoServerFile.getKeywords(), geoServerFile.getWmsPath())) {
//						failedUploads.add(geoServerFile);
//						logger.debug("File " + FilenameUtils.getBaseName(zipFile.getName()) + " caused an error during uploading.");
//					}
					break;
				case "GeoTiff":
					File tifFile = new File(geoServerFile.getStorePath());
//					if(!geoServerManager.uploadGeoTIFFFile(geoServerFile.getWorkspace(), geoServerFile.getStoreName(), geoServerFile.getLayerName(), tifFile, geoServerFile.getTitle(), geoServerFile.getLayerAbstract(), geoServerFile.getMetadataXmlHref(), geoServerFile.getKeywords(), geoServerFile.getWmsPath())) {
//						failedUploads.add(geoServerFile);
//						logger.debug("File " + FilenameUtils.getBaseName(tifFile.getName()) + " caused an error during uploading.");
//					}
					break;
				default:
					logger.debug(geoServerFile.getLayerName() + " is not a valid file type");
				}
			}
		}
		
		if(failedUploads.isEmpty()) {
			logger.debug("All GeoServer files successfully uploaded");
			deleteTemporaryFolder(getRelativePath(csvFileName) + "/GS_LAYER_UPLOADER_ZIPS");
			return true;
		} else {
			fileHandler.rewriteFailedUploadsToCSV(failedUploads, csvFileName);
			logger.debug("Not all files to upload were successful, the failed uploads have been written back to the csv file, please fix them and try again");
			return false;
		}
	}
	
	public void deleteTemporaryFolder(String folderPath) {
		System.out.println(folderPath);
	}
	
	public String getRelativePath(String targetPath) {
		int lastIndex = targetPath.lastIndexOf("\\") == -1 ? targetPath.lastIndexOf("/") : targetPath.lastIndexOf("\\");
		return targetPath.substring(0, lastIndex);
	}
	
	public boolean deleteWorkspace(String workspaceName) {
		return geoServerManager.deleteWorkspace(workspaceName);
	}
}