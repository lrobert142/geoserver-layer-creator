<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>bulkloader</groupId>
	<artifactId>bulkloader</artifactId>
	<version>0.5.1</version>

	<organization>
		<name>Australian Institute of Marine Science (AIMS)</name>
	</organization>

	<!-- *** IMPORTANT ***: If you are using Java 7, the binding of JavaFX hasn't 
		been completed. You have to run the following to bind JavaFX to Java. It 
		will fix the Java classpath. sudo mvn com.zenjava:javafx-maven-plugin:2.0:fix-classpath 
		For more info: http://zenjava.com/javafx/maven/fix-classpath.html Compile 
		the project normally using "package" goal The executable jar is the one with 
		the "-jfx" suffix. For more info: http://docs.e-atlas.org.au/node/160 -->

	<repositories>
		<repository>
			<id>central</id>
			<name>Maven Repository Switchboard</name>
			<url>http://repo1.maven.org/maven2</url>
		</repository>

		<repository>
			<id>GeoSolutions</id>
			<url>http://maven.geo-solutions.it/</url>
		</repository>
	</repositories>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<mainClass>com.gov.aims.MainApp</mainClass>
	</properties>

	<!-- http://search.maven.org -->
	<dependencies>
		<dependency>
			<groupId>it.geosolutions</groupId>
			<artifactId>geoserver-manager</artifactId>
			<version>1.7-SNAPSHOT</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
		</dependency>
		<dependency>
			<groupId>net.sf.opencsv</groupId>
			<artifactId>opencsv</artifactId>
			<version>2.0</version>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
			<version>1.7.7</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.7</version>
		</dependency>
		<dependency>
			<groupId>com.zenjava</groupId>
			<artifactId>javafx-maven-plugin</artifactId>
			<version>1.5</version>
		</dependency>
	</dependencies>

	<build>
		<!-- Maven plugin to bundle all needed libraries in the jar, and properly 
			bind to native JavaFX libraries. -->
		<!-- See: http://www.zenjava.com/2013/05/26/javafx-maven-plugin-2-0-alpha-feedback-needed -->
		<plugins>
			<plugin>
				<groupId>com.zenjava</groupId>
				<artifactId>javafx-maven-plugin</artifactId>
				<!-- NOTE: Version 2.0+ of the plugin save the dependencies into a separate 
					"lib" folder, which makes it harder to use the application. -->
				<version>1.5</version>

				<!-- Run on creation of the jar -->
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<!-- Called "jar" in version 2.0+ -->
							<goal>build-jar</goal>
						</goals>
					</execution>
				</executions>

				<!-- Create the Manifest -->
				<configuration>
					<mainClass>${mainClass}</mainClass>
					<bundleType>ALL</bundleType>
				</configuration>

				<!-- The plugin is bundled to an old version of Maven API. This is needed 
					to bind to Maven 3.2+ (probably ver 3.0+) -->
				<dependencies>
					<dependency>
						<groupId>org.twdata.maven</groupId>
						<artifactId>mojo-executor</artifactId>
						<version>2.2.0</version>
					</dependency>
				</dependencies>
			</plugin>
		</plugins>
	</build>

	<!-- OLDER VERSION OF MAVEN! If the compilation doesn't work Try to comment 
		out the "dependencies" section of the plugin above. If that still doesn't 
		work Try using the following build configuration instead. <build> <plugins> 
		<plugin> <groupId>com.zenjava</groupId> <artifactId>javafx-maven-plugin</artifactId> 
		<version>1.1</version> <executions> <execution> <phase>package</phase> <goals> 
		<goal>package</goal> </goals> </execution> </executions> <configuration> 
		<mainClass>${mainClass}</mainClass> <bundleType>ALL</bundleType> </configuration> 
		</plugin> </plugins> </build> -->

</project>
