package com.gov.aims;
import java.io.File;
import java.io.IOException;
import java.util.List;

import org.apache.log4j.Logger;

import com.gov.aims.MainApp;
import com.gov.aims.model.FileHandlerWrapper;
import com.gov.aims.model.GeoServerManager;
import com.gov.aims.model.ShapeFile;

import com.gov.aims.model.TiffFile;
import com.gov.aims.view.OverviewController;
import com.gov.aims.view.RootLayoutController;

import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.input.DragEvent;
import javafx.scene.input.Dragboard;
import javafx.scene.input.TransferMode;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;

public class MainApp extends Application {

	private Stage primaryStage;
	public static BorderPane rootLayout;
	private FileHandlerWrapper fileHandler;
	private GeoServerManager geoServerManager;
	private Logger logger;

	public MainApp() {
		fileHandler = new FileHandlerWrapper();
		geoServerManager = new GeoServerManager("http://localhost:8080/geoserver/", "admin", "geoserver");
	}

	@Override
	public void start(Stage primaryStage) throws Exception {
		this.primaryStage = primaryStage;
		this.primaryStage.setTitle("Application Project");
		this.primaryStage.setResizable(false);	
		initRootLayout();
		showOverview();
	}

	// Shows the overview inside the root layout.
	public void showOverview() {
		try {
			// overview.
			FXMLLoader loader = new FXMLLoader();
			loader.setLocation(MainApp.class.getResource("view/Overview.fxml"));			
			AnchorPane Overview = (AnchorPane) loader.load();
			// Set overview into the center of root layout.
			rootLayout.setCenter(Overview);
			// Give the controller access to the main app.
			OverviewController controller = loader.getController();
			controller.setMainApp(this);

			// Test Drag and Drop
			Overview.setOnDragOver(new EventHandler<DragEvent>() {

				@Override
				public void handle(DragEvent event) {
					Dragboard db = event.getDragboard();
					if (db.hasFiles()) {
						event.acceptTransferModes(TransferMode.COPY);
					} else {
						event.consume();
					}
				}
			});
			// Test Dropping over surface
			Overview.setOnDragDropped(new EventHandler<DragEvent>() {
				@Override
				public void handle(DragEvent event) {
					Dragboard db = event.getDragboard();
					boolean success = false;
					if (db.hasFiles()) {
						success = true;
						String filePath = null;
						for (File file : db.getFiles()) {
							filePath = file.getAbsolutePath();
							//RootLayoutController.FileObject.setUpShapeFilesForUpload(filePath.toString());
							OverviewController.showFileInView();
							OverviewController.showZipFileInView();
							String DirString = "";
							DirString = " " +filePath.toString();
							OverviewController.DirectoryLabel.setText(DirString);
							RootLayoutController.SelectedDirectory = filePath;
						}
					}
					event.setDropCompleted(success);
					event.consume();
				}
			});

		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	// Initializes the root layout.
	private void initRootLayout() {
		try {
			// Load root layout from fxml file.
			FXMLLoader loader = new FXMLLoader();
			loader.setLocation(MainApp.class
					.getResource("view/RootLayout.fxml"));
			rootLayout = (BorderPane) loader.load();
			// Show the scene containing the root layout.
			Scene scene = new Scene(rootLayout);
			primaryStage.setScene(scene);
			// Give the controller access to the main app.
			RootLayoutController controller = loader.getController();
			controller.setMainApp(this);
			primaryStage.show();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}
	
	


	// Returns the main stage.
	public Stage getPrimaryStage() {
		return primaryStage;
	}

	public static void main(String[] args) {
		launch(args);
	}
	
	
	
	public void setUpShapeFiles(String csvDirectory) {
		fileHandler.setUpShapeFilesForUpload(csvDirectory);
	}
	
	/**
	 * Creates CSV file in the directory and fills CSV with arbitrary data
	 * @param targetDirectory - the directory where the tiff are. This is also where the CSV file will be created
	 */
	public void setUpTiffFiles(String targetDirectory) {
		fileHandler.setUpTiffFilesForUpload(targetDirectory);
	}
	
	/**
	 * Uploads each ShapeFile to the GeoServer, with the settings defined in the CSV
	 * @param csvDirectory - csvDirectory - the directory where the shapefiles, .zip files and CSV are
	 * @return boolean - true if the upload was successful for all files, false if one or more files failed to upload. If one file fails to upload then the uploader will stop, it will not upload the rest of the files
	 */
	public boolean uploadShapeFilesToGeoServer(String csvDirectory) {
		List<ShapeFile> shapeFiles = fileHandler.parseShapeFileUploadLayersCsvToBean(csvDirectory);
		for(ShapeFile shapeFile : shapeFiles) {
			File zipFile = new File(changeFilePathExtension("zip", shapeFile.getStorePath()));
			File prjFile = new File(changeFilePathExtension("prj", shapeFile.getStorePath()));
			if(!geoServerManager.uploadShapeFile(shapeFile.getWorkspace(), shapeFile.getStoreName(), zipFile, prjFile, shapeFile.getTitle(), shapeFile.getLayerAbstract(), shapeFile.getMetadataXmlHref(), shapeFile.getKeywords(), shapeFile.getWmsPath())) {
				return false;
			}
		}
		return true;
	}
	
	public boolean uploadTiffFilesToGeoServer(String targetDirectory) {
		List<TiffFile> tifFiles = fileHandler.parseTiffFileUploadLayersCsvToBean(targetDirectory);
		for(TiffFile tifFile : tifFiles) {
			File file = new File(tifFile.getStorePath());
			if(!geoServerManager.uploadGeoTIFFFile(tifFile.getWorkspace(), tifFile.getStoreName(), file, tifFile.getTitle(), tifFile.getLayerAbstract(), tifFile.getMetadataXmlHref(), tifFile.getKeywords(), tifFile.getWmsPath()))
				return false;
		}
		return true;
	}
	
	/**
	 * Sets the extension of a filename
	 * @param extension - the extension to set to the path. <b>NOTE: Do not include the full stop, only include the extension<b> eg zip NOT .zip
	 * @param path - the path of the file to change the extension of
	 * @return String - the path with the changed extension
	 */
	private String changeFilePathExtension(String extension, String path) {
		return path.substring(0, path.lastIndexOf(".") + 1) + extension;
	}
}
