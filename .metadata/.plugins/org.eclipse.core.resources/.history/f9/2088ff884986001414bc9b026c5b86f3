/**
@author Zoe McIntosh
@version 1.0
@since 18/12/14
 */
package au.gov.aims.view;

import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import au.gov.aims.MainApp;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.ProgressIndicator;
import javafx.scene.layout.AnchorPane;
import javafx.stage.DirectoryChooser;
import javafx.stage.FileChooser;
import au.gov.aims.model.GeoServerFile;
import au.gov.aims.model.GeoServerFileHandlerWrapper;
import au.gov.aims.model.UploadManager;
import au.gov.aims.utilities.PathsHandler;
import au.gov.aims.view.ServerDetailsController;

public class OverviewController {

	@FXML
	private ListView<String> listViewFiles;
	@FXML
	private Label directoryLabel;
	@FXML
	private Label directoryTitleLabel;
	@FXML
	private Label fileTitleLabel;
	@FXML
	private Label messageLabel;
	
	@FXML
	private ProgressIndicator progressIndicator;
	@FXML
	private Button selectDirectoryButton;
	@FXML
	private Button createCSVButton;
	@FXML
	private Button openCSVButton;
	@FXML
	private Button uploadToGeoServerButton;

	private static List<String> fileNames = new ArrayList<String>();
	private static ObservableList<String> fileItems;
	private MainApp mainApp;
	private ServerDetailsController serverDetailsController;
	private RootLayoutController rootLayoutController;
	private UploadingController uploadingController;

	private GeoServerFileHandlerWrapper geoServerFileHandler = new GeoServerFileHandlerWrapper();
	private List<File> filesForUpload = new ArrayList<File>();

	public OverviewController() {
	}

	public void setMainApp(MainApp mainApp) {
		this.mainApp = mainApp;
	}

	public void setUploadingController(UploadingController uploadingController) {
		this.uploadingController = uploadingController;
	}

	public void setServerDetailsController(ServerDetailsController serverDetailsController) {
		this.serverDetailsController = serverDetailsController;
	}

	public void setRootLayoutController(RootLayoutController rootLayoutController) {
		this.rootLayoutController = rootLayoutController;
	}

	public void setGeoServerFileHandlerWrapper(GeoServerFileHandlerWrapper geoServerFileHandler) {
		this.geoServerFileHandler = geoServerFileHandler;
	}

	/**
	 * Initializes the controller class. This is automatically called after the
	 * fxml file has been loaded
	 * 
	 * @throws IOException
	 */
	@FXML
	private void initialize() throws IOException {
		fileItems = listViewFiles.getItems();
		createCSVButton.setDisable(true);
		uploadToGeoServerButton.setDisable(true);
		progressIndicator.setVisible(false);
	}
	
	/**
	 * Function to show the directory and the files in it
	 */
	public void findFilesInDirectory() {
		try {
			progressIndicator.setVisible(true);
			progressIndicator.setProgress(ProgressIndicator.INDETERMINATE_PROGRESS);
			try {
				DirectoryChooser chooser = new DirectoryChooser();
				chooser.setTitle("Find Directory for file");
				File directory = rootLayoutController.getDefaultDirectory();
				chooser.setInitialDirectory(directory);
				File selectedDirectory = chooser.showDialog(mainApp.getPrimaryStage());
				
				if (displayFilesAndDirectory(selectedDirectory)) {
					messageLabel.setText("Found all files in Directory.");
					uploadToGeoServerButton.setDisable(true);
					createCSVButton.setDisable(false);
				} else {
					fileItems.clear();
					directoryLabel.setText("");
					messageLabel.setText("No directory chosen.");
					createCSVButton.setDisable(true);
				}
				progressIndicator.setProgress(1);
			} catch (NullPointerException e) {
				messageLabel.setText("Error finding Files in the chosen directory");
				mainApp.getLogger().error(e.getMessage() + e.getStackTrace());
				progressIndicator.setProgress(1);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Function to create the CSV file
	 */
	public void createCSV() {
		progressIndicator.setVisible(true);
		progressIndicator.setProgress(ProgressIndicator.INDETERMINATE_PROGRESS);
		String filePath = rootLayoutController.getDefaultDirectory() + "\\uploadLayers.csv";
		UploadManager uploadManager = new UploadManager();
		uploadManager.writeCSV(rootLayoutController.getDefaultDirectory().toString());
		progressIndicator.setVisible(true);
		progressIndicator.setProgress(1);
		mainApp.setCSVFilePath(new File(filePath));
		messageLabel.setText("Created CSV in your chosen directory");
	}

	/**
	 * function to view the CSV file
	 */
	public void viewCSV() {
		messageLabel.setText("");
		progressIndicator.setVisible(true);
		progressIndicator.setProgress(ProgressIndicator.INDETERMINATE_PROGRESS);
		try {
			FileChooser fileChooser = new FileChooser();
			if (Desktop.isDesktopSupported()) {
				fileChooser.setTitle("Open CSV File");
				fileChooser.getExtensionFilters().addAll(
						new FileChooser.ExtensionFilter("CSV", "*.csv"));
				String initialDirectory = mainApp.getCSVFilePath().toString().replace(mainApp.getCSVFilePath().getName(), "");
				if(initialDirectory.isEmpty() || initialDirectory == null)
					initialDirectory = "C:/";
				fileChooser.setInitialDirectory(new File (initialDirectory));
				File file = fileChooser.showOpenDialog(mainApp.getPrimaryStage());
				rootLayoutController.setDefaultDirectory(file.getAbsoluteFile());
				if (file != null) {
					try {
						Desktop.getDesktop().open(file);
						fileItems.clear();
						List<GeoServerFile> files = geoServerFileHandler.parseGeoServerFileUploadLayersCsvToBean(file.toString());
						for(GeoServerFile filename : files) {
							String name = PathsHandler.absoluteToRelativePath(filename.getStorePath(), PathsHandler.backslashToForwardslash(PathsHandler.getBasePath(file.toString())));
							fileItems.add(name);
						}
						directoryLabel.setText(PathsHandler.getBasePath(file.toString()));
					} catch (IOException e) {
						mainApp.getLogger().error(
								e.getMessage() + e.getStackTrace());
					}
				}
			} else {
				messageLabel.setText("File cannot be loaded");
				uploadToGeoServerButton.setDisable(true);
				createCSVButton.setDisable(false);
			}
			uploadToGeoServerButton.setDisable(false);
			createCSVButton.setDisable(true);
			progressIndicator.setProgress(1);
		} catch (NullPointerException e) {
			messageLabel.setText("Error finding Files in the chosen directory");
			mainApp.getLogger().error(e.getMessage() + e.getStackTrace());
			progressIndicator.setProgress(1);
		}
	}

	/**
	 * Function to upload files to the GeoServer
	 */
	public void UploadToGeoServer() {
		if (serverDetailsController.getGeoServerURLString() == null
				|| serverDetailsController.getUserNameString() == null
				|| serverDetailsController.getPasswordString() == null
				|| serverDetailsController.getGeoServerURLString().isEmpty()
				|| serverDetailsController.getUserNameString().isEmpty()
				|| serverDetailsController.getPasswordString().isEmpty()) {
			mainApp.showServerDetailsView();
		} else {
			openUploaderView();
		}
	}

	public static List<String> getFileNames() {
		return fileNames;
	}
	
	/**
	 * Function to display the files and Directory in the window
	 */
	public boolean displayFilesAndDirectory (File selectedDirectory) {
		if (selectedDirectory != null) {
			filesForUpload = geoServerFileHandler.findFilesForUpload(selectedDirectory.toString());
			rootLayoutController.setDefaultDirectory(selectedDirectory);
			directoryLabel.setText(selectedDirectory.toString());
			if (filesForUpload != null) {
				fileItems.clear();
				for (File file : filesForUpload) {
					fileItems.add(file.toString().replace(selectedDirectory.toString(), ""));
				}
				return true;
			}
		}
		return false; 
	}

	public static void setFileNames(List<String> fileNames) {
		OverviewController.fileNames = fileNames;
	}
	
	/**
	 * About view - for information about the application - 
	 * used in the About MenuItem
	 */
	public void openUploaderView() {
		try {
			FXMLLoader loader = new FXMLLoader();
			loader.setLocation(getClass().getResource("/view/UploadingView.fxml"));
			AnchorPane overview = (AnchorPane) loader.load();
			mainApp.getRootLayout().setCenter(overview);
			uploadingController = loader.getController();
			uploadingController.setMainApp(mainApp);
			uploadingController.setRootLayoutController(rootLayoutController);
			uploadingController.setServerDetailsController(serverDetailsController);
			uploadingController.uploadThread();
		} catch (IOException e) {
			mainApp.getLogger().error(e.getMessage() + e.getStackTrace());
		}
	}
}